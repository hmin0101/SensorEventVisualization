<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">

    <title>MultiScreen</title>

    <link rel="stylesheet" href="/stylesheets/bootstrap.min.css">
    <link rel="stylesheet" href="/font-awesome/css/font-awesome.css">

    <link rel="stylesheet" href="/stylesheets/animate.css">
    <link rel="stylesheet" href="/stylesheets/style.css">
</head>

<body>
<div id="wrapper">

    <% include ./nav %>
    
    <div id="page-wrapper" class="gray-bg">
        <div class="row border-bottom">
            <nav class="navbar navbar-static-top white-bg" role="navigation" style="margin-bottom: 0">
                <div class="navbar-header navbar-top-left">
                    <a class="navbar-minimalize minimalize-styl-2 btn btn-primary " href="#"><i class="fa fa-bars"></i> </a>
                </div>
                <ul class="nav navbar-top-links navbar-top-right">
                    <li>
                        <span class="m-r-sm text-muted welcome-message">Welcome to Multiscreen Management Site.</span>
                    </li>
                </ul>
            </nav>
        </div>

        <div class="wrapper wrapper-content">
            <div class="row">
                <div class="col-lg-12">
                    <div class="ibox">
                        <div class="ibox-title">
                            <h5>STAY EVENT CHART</h5>
                            <div class="input-group" style="float: right;">
                                <label for="select-sensor" style="margin-right: 10px;">Sensor :</label>
                                <select style="display:inline-block;" id="select-sensor">
                                    <% const sensorList = deviceList[pos].sensors; %>
                                    <% let index = 0; %>
                                    <% for (const sensor of sensorList) { %>
                                        <option value="<%= sensor.id %>"><%= sensor.name %></option>
                                    <% } %>
                                </select>
                            </div>
                        </div>
                        <div class="ibox-content" style="padding-top: 10px; padding-bottom: 10px">
                            <div class="row" id="connect-device-list">
                                <div id="chart" style="width: 100%; height: 460px"></div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

        </div>
    </div>
</div>

<!-- Mainly scripts -->
<script src="/javascripts/jquery-3.1.1.min.js"></script>
<script src="/javascripts/bootstrap.js"></script>
<script src="/javascripts/jquery.metisMenu.js"></script>
<script src="/javascripts/jquery.slimscroll.min.js"></script>

<!-- Custom and plugin javascript -->
<script src="/javascripts/inspinia.js"></script>
<script src="/javascripts/pace.min.js"></script>

<!-- echarts -->
<script src="https://cdnjs.cloudflare.com/ajax/libs/echarts/4.2.1/echarts.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/echarts/4.2.1/extension/dataTool.min.js"></script>

<!-- jQuery UI -->
<script src="/javascripts/jquery-ui.min.js"></script>

<script>
    $(document).ready(() => {

        const stayEventData = JSON.parse('<%- stayEventData %>');       // 사용자 감지 이벤트의 지속 시간 데이터 (echart 에서 사용할 수 있도록 가공된 데이터)
        // Data
        const data = echarts.dataTool.prepareBoxplotData(stayEventData.data);

        const option = {
            tooltip: {
                formatter: function (param) {
                    return [
                        param.name + ' Hour',
                        'Max Stay Time: ' + param.data[5] + ' 초',
                        //'Q3: ' + param.data[4],
                        'Avg Stay Time: ' + param.data[3] + ' 초',
                        //'Q1: ' + param.data[2],
                        'Min Stay Time: ' + param.data[1] + ' 초'
                    ].join('<br/>');
                }
            },
            grid: {
                left: '4%',
                right: '4%',
                bottom: '10%'
            },
            xAxis: {
                type: 'category',
                data: data.axisData,
                boundaryGap: true,
                nameGap: 30,
                splitArea: {
                    show: false
                },
                axisLabel: {
                    formatter: '{value} Hour'
                },
                splitLine: {
                    show: false
                }
            },
            yAxis: {
                type: 'value',
                name: '(Second)',
                splitArea: {
                    show: true
                }
            },
            series: [{
                name: 'boxplot',
                type: 'boxplot',
                data: data.boxData,
            }]
        };

        const chart = echarts.init(document.getElementById('chart'));       // echart 초기화
        chart.setOption(option);                                            // option을 추가하여 생성

        // Select Device
        let currentDeviceId = null;
        $('#select-device').on("change", function(e) {
            currentDeviceId = $(this).val();

            $.ajax({
                type: "POST",
                url: "/sensor/list",
                data: "deviceId="+currentDeviceId,
                success: function(result) {
                    if (result.result && result.sensorList.length > 0) {
                        $.ajax({
                            type: "POST",
                            url: "/choice/device",
                            data: "type=stay&id="+currentDeviceId+"&sensorId="+result.sensorList[0].id,
                            success: function(result) {
                                if (result) {
                                    const data = echarts.dataTool.prepareBoxplotData(result.stayEventData.data);
                                    option.series = [{
                                        name: 'boxplot',
                                        type: 'boxplot',
                                        data: data.boxData,
                                    }];
                                    chart.setOption(option);
                                } else {
                                    alert(result.message);
                                }
                            }
                        });

                        $("#select-sensor").empty();
                        result.sensorList.forEach(function(elem) {
                            $('#select-sensor').append('<option value=' + elem.id + '>' + elem.name + '</option>');
                        })
                    } else {
                        alert("Select Sensor Error!");
                    }
                }
            });
        });

        // Select Sensor
        $('#select-sensor').on("change", function(e) {
            const sensorId = $(this).val();

            $.ajax({
                type: "POST",
                url: "/choice/device",
                data: "type=stay&id="+currentDeviceId+"&sensorId="+sensorId,
                success: function(result) {
                    if (result.result) {
                        const data = echarts.dataTool.prepareBoxplotData(result.stayEventData.data);
                        option.series = [{
                            name: 'boxplot',
                            type: 'boxplot',
                            data: data.boxData,
                        }];
                        chart.setOption(option);
                    } else {
                        alert(result.message);
                    }
                }
            });
        });

    });
</script>
</body>
</html>
